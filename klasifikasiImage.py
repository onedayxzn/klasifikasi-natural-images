# -*- coding: utf-8 -*-
"""submision3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rEb41GAm6ZONUN2D9PaDi9G2xaTMnroL
"""

import zipfile, os
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt


local_zip = '/content/Natural.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r') 
zip_ref.extractall('/content')
zip_ref.close()

base_dir ='/content/data/natural_images'

os.listdir('/content/data/natural_images')

print('total airplane : ', len(os.listdir('/content/data/natural_images/airplane')))
print('total car : ', len(os.listdir('/content/data/natural_images/car')))
print('total cat : ', len(os.listdir('/content/data/natural_images/cat')))
print('total flower : ', len(os.listdir('/content/data/natural_images/flower')))
print('total fruit : ', len(os.listdir('/content/data/natural_images/fruit')))
print('total motorbike : ', len(os.listdir('/content/data/natural_images/motorbike')))
print('total person : ', len(os.listdir('/content/data/natural_images/person')))

train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range = 20,
    horizontal_flip=True,
    shear_range=0.2,
    fill_mode ='nearest',
    validation_split = 0.2
)

test_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range = 20,
    horizontal_flip=True,
    shear_range=0.2,
    fill_mode ='nearest',
    validation_split = 0.2
)

seed = 1

train_generator = train_datagen.flow_from_directory(
    base_dir,
    target_size=(150, 150), 
    shuffle = True,
    subset='training',
    class_mode = 'categorical',
    seed=seed
)

validation_generator = test_datagen.flow_from_directory(
    base_dir,
    shuffle = True,
    target_size=(150, 150), 
    subset = 'validation',
    class_mode = 'categorical',
    seed=seed
)

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(64, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPool2D(2, 2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(256, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(256, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(8, activation='softmax'),
])

model.compile(loss='categorical_crossentropy',
              optimizer=tf.optimizers.Adam(),
              metrics=['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
     if(logs.get('accuracy') > 0.80 and logs.get('val_accuracy') > 0.80):
      print('\n Akurasi telah mencapai > 80%')
      self.model.stop_training = True
callbacks = myCallback()

hist = model.fit(
      train_generator,
      steps_per_epoch = 25, 
      epochs = 100,
      validation_data = validation_generator,
      validation_steps = 5,
      batch_size=64,
      callbacks=[callbacks],
      verbose = 2)

plt.plot(hist.history['accuracy'])
plt.plot(hist.history['val_accuracy'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train','Validation'], loc='bottom right')
plt.show()

plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train','Validation'], loc='upper right')
plt.show()

converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('animal.tflite', 'wb') as f:
  f.write(tflite_model)